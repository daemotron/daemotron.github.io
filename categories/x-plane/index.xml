<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>X-Plane on My Universe</title><link>https://www.my-universe.com/categories/x-plane/</link><description>Recent content in X-Plane on My Universe</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Fri, 14 Feb 2025 16:54:59 +0100</lastBuildDate><atom:link href="https://www.my-universe.com/categories/x-plane/index.xml" rel="self" type="application/rss+xml"/><item><title>Pilatus PC-12 X-Plane Wallpaper</title><link>https://www.my-universe.com/2025/02/14/pilatus-pc-12-x-plane-wallpaper/</link><pubDate>Fri, 14 Feb 2025 16:54:59 +0100</pubDate><guid>https://www.my-universe.com/2025/02/14/pilatus-pc-12-x-plane-wallpaper/</guid><description>&lt;p>I was asked to share this wallpaper &amp;ndash; well, here you go. You can download the image
in full resolution here:
&lt;a href="https://www.my-universe.com/2025/02/14/pilatus-pc-12-x-plane-wallpaper/thranda_pc12_2560x1440.png">Thranda PC-12 Wallpaper (2560Ã—1440)&lt;/a>&lt;/p>
&lt;p>Installation for X-Plane 12 is easy: just place the &lt;code>.png&lt;/code> file into the
&lt;code>Output/backgrounds/&lt;/code> folder of your X-Plane installation.&lt;/p></description></item><item><title>Dataref Caching Revisited</title><link>https://www.my-universe.com/2023/09/27/dataref-caching-revisited/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.my-universe.com/2023/09/27/dataref-caching-revisited/</guid><description>&lt;p>Earlier this year I wrote about &lt;a href="https://www.my-universe.com/2023/04/20/cache-your-datarefs/">caching datarefs&lt;/a>. Back then we only looked at caching single datarefs, which quickly leads to bloated code once applied in a wider context. So here we are again, taking a closer look at caching &lt;em>many&lt;/em> datarefs efficiently.&lt;/p>
&lt;h4 id="what-about-trees">What About Trees&lt;/h4>
&lt;blockquote>
&lt;p>&amp;ldquo;Are we going to leave those poor little Datarefs here in this horrid, dark, dank, tree-infested &amp;mdash; I mean&amp;hellip; charming, quite charming, forest?&amp;rdquo;&lt;/p>
&lt;p>&amp;mdash; unknown dwarf coder&lt;/p></description></item><item><title>Configuration File with XPPL</title><link>https://www.my-universe.com/2023/09/23/configuration-file-with-xppl/</link><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.my-universe.com/2023/09/23/configuration-file-with-xppl/</guid><description>&lt;p>In this blog post we&amp;rsquo;re looking into using &lt;a href="https://github.com/daemotron/xppl/">XPPL&lt;/a> to enhance a plugin with a configuration file. Working with XPPL&amp;rsquo;s configuration module is follows this five-step sequence:&lt;/p>
&lt;ol>
&lt;li>initialize a configuration context&lt;/li>
&lt;li>register configuration properties&lt;/li>
&lt;li>load the configuration file&lt;/li>
&lt;li>access the configuration values&lt;/li>
&lt;li>clean up&lt;/li>
&lt;/ol>
&lt;p>First, we need a configuration context. Since we will need to keep it alive throughout the whole plugin life cycle, we declare it as static, global variable:&lt;/p></description></item><item><title>Introducing XPPL</title><link>https://www.my-universe.com/2023/09/22/introducing-xppl/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.my-universe.com/2023/09/22/introducing-xppl/</guid><description>&lt;p>Are you tired of (re-)writing the same boilerplace code for every &lt;a href="https://www.x-plane.com">X-Plane&lt;/a> plugin project &amp;mdash; over and over again? Well, at least that&amp;rsquo;s how I felt when I started my fourth or fifth plugin. Sure, I reused a lot of my boilerplate code, but with every project, I refined and enhanced it. Backporting those changes to older plugins became a tedious task though; therefore I started the X-Plane Plugin Library (&lt;a href="https://github.com/daemotron/xppl">XPPL&lt;/a>).&lt;/p></description></item></channel></rss>