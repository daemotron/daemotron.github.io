<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>x-plane on My Universe</title><link>https://daemotron.github.io/categories/x-plane/</link><description>Recent content in x-plane on My Universe</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 27 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://daemotron.github.io/categories/x-plane/index.xml" rel="self" type="application/rss+xml"/><item><title>Dataref Caching Revisited</title><link>https://daemotron.github.io/2023/09/27/dataref-caching-revisited/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://daemotron.github.io/2023/09/27/dataref-caching-revisited/</guid><description>Earlier this year I wrote about caching datarefs. Back then we only looked at caching single datarefs, which quickly leads to bloated code once applied in a wider context. So here we are again, taking a closer look at caching many datarefs efficiently.
What About Trees &amp;ldquo;Are we going to leave those poor little Datarefs here in this horrid, dark, dank, tree-infested &amp;mdash; I mean&amp;hellip; charming, quite charming, forest?&amp;rdquo;
&amp;mdash; unknown dwarf coder</description></item><item><title>Configuration File with XPPL</title><link>https://daemotron.github.io/2023/09/23/configuration-file-with-xppl/</link><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid>https://daemotron.github.io/2023/09/23/configuration-file-with-xppl/</guid><description>In this blog post we&amp;rsquo;re looking into using XPPL to enhance a plugin with a configuration file. Working with XPPL&amp;rsquo;s configuration module is follows this five-step sequence:
initialize a configuration context register configuration properties load the configuration file access the configuration values clean up First, we need a configuration context. Since we will need to keep it alive throughout the whole plugin life cycle, we declare it as static, global variable:</description></item><item><title>Introducing XPPL</title><link>https://daemotron.github.io/2023/09/22/introducing-xppl/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://daemotron.github.io/2023/09/22/introducing-xppl/</guid><description>Are you tired of (re-)writing the same boilerplace code for every X-Plane plugin project &amp;mdash; over and over again? Well, at least that&amp;rsquo;s how I felt when I started my fourth or fifth plugin. Sure, I reused a lot of my boilerplate code, but with every project, I refined and enhanced it. Backporting those changes to older plugins became a tedious task though; therefore I started the X-Plane Plugin Library (XPPL).</description></item></channel></rss>