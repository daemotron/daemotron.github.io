<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on My Universe</title><link>https://www.my-universe.com/categories/go/</link><description>Recent content in Go on My Universe</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Sat, 06 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.my-universe.com/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration to Go</title><link>https://www.my-universe.com/2024/04/06/configuration-to-go/</link><pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.my-universe.com/2024/04/06/configuration-to-go/</guid><description>&lt;p>One of the boilerplate tasks for nearly every (application development) project is the implementation of an application configuration management. In most cases, applications have aspects we want to be configurable, e.g. the port a server listens on, the language an UI starts with or the database connection an application shall use. &lt;a href="https://12factor.net/">The twelve-factor app methodology&lt;/a> propagates using environment variables for this purpose, but what might be a good idea for cloud-deployed web apps won&amp;rsquo;t work equally well for desktop applications or in traditional deployment scenarios. For them, more traditional ways like configuration files or command line flags might be a better choice.&lt;/p></description></item></channel></rss>