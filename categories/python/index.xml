<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on My Universe</title><link>https://daemotron.github.io/categories/python/</link><description>Recent content in python on My Universe</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 31 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://daemotron.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Elegant Python Exceptions</title><link>https://daemotron.github.io/2023/10/31/elegant-python-exceptions/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://daemotron.github.io/2023/10/31/elegant-python-exceptions/</guid><description>Particularly when creating library packages in Python, raising exceptions is a great way to let the downstream developer know about problems occuring while executing code from within the library. Python&amp;rsquo;s built-in exceptions cover a whole host of cases. However, some problems might be library-specific and deserve a custom exception.
Custom ExceptionsCreating a custom exception in Python isn&amp;rsquo;t particularly hard when observing a few rules:
Custom exceptions shall be derived from Python&amp;rsquo;s Exception class By convention, exception names shall end with &amp;ldquo;Error&amp;rdquo; 1class MyLibError(Exception): 2 pass In many library packages, you will find exceptions similar to the one shown in the code example above.</description></item></channel></rss>