<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[My Universe]]></title><description><![CDATA[Mens Insana In Corpore Ignavo]]></description><link>https://daemotron.github.io</link><generator>RSS for Node</generator><lastBuildDate>Mon, 29 May 2017 06:48:05 GMT</lastBuildDate><atom:link href="https://daemotron.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Pythonic Distance Conversion]]></title><description><![CDATA[<div class="paragraph">
<p>When dealing with distances or lengths, it&#8217;s a common problem to convert values between all the different units
available out there. Of course, converting itself is a less than complicated simple floating point division or
multiplication, depending on how values and conversion factors are stored internally. However, maintaining conversion
factors all across a project is a tedious task, and Python has some good means at hand to simplify our life.</p>
</div>
<div class="paragraph">
<p>Before entering into implementation details, let&#8217;s have a look at some general rules that make life easier when dealing
with distances or lengths (or any other unit of measurement). First, it&#8217;s a good idea to align on one single reference
unit. All values will be stored in this unit, and all computations are done using this unit. Any other unit will be treated as input/output filter.
Second, it&#8217;s also a very good idea to use
<a href="https://en.wikipedia.org/wiki/International_System_of_Units">SI units</a> for that purpose. No, that&#8217;s not another rant
about why the metric system is superior to the imperial system, but SI units generally have well-defined conversions
to any other unit system. Example: common imperial units such as <em>inch</em>, <em>foot</em>, <em>yard</em> and <em>mile</em> have a standard
definition based on the SI unit <em>metre</em> (broad hint: use <em>metre</em> as base unit when doing length calculations).</p>
</div>
<div class="paragraph">
<p>Finally, when dealing with conversion, it would be nice (and very pythonic) to not have the poor guy implementing stuff
on your API call <code>convert</code> routines for any operation. Instead, providing result objects offering the result in any
conversion available is a much nicer way of implementing API-transparent conversion.</p>
</div>
<div class="paragraph">
<p>A basic class representing a distance could look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">class Distance(object):

    def __init__(self, value=0.0):
        self._distance = float(value)

    @property
    def raw(self):
        return self._distance

    @raw.setter
    def raw(self, value):
        self._distance = float(value)</code></pre>
</div>
</div>
<div class="paragraph">
<p>All very fine, but right now, this class is not yet an improvement: its objects cannot be used in arithmetic
expressions, and there&#8217;s no conversion between units either. On top of that, its representation in a shell is as
speaking as <code>&lt;Distance object at 0x108479f60&gt;</code>. Not very impressive, I know&#8201;&#8212;&#8201;but let&#8217;s fix those issues one by one.</p>
</div>
<div class="paragraph">
<p>First, we want a decent representation making it easier to play with the class in an interactive Python interpreter.
That can be achieved by adding a
<a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__"><code>__repr__</code> method</a>.
In our case this can be as simple as this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">def __repr__(self):
    return str(self._distance)</code></pre>
</div>
</div>
<div class="paragraph">
<p>The next fundamental problem we want to fix: trying to cast a <code>Distance</code> object into a numeric data type will raise
a <a href="https://docs.python.org/3/library/exceptions.html#TypeError">TypeError</a> exception. This can be easily fixed by adding
<a href="https://docs.python.org/3/reference/datamodel.html#object.__int__">cast methods</a> to our class:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">def __float__(self):
    return self._distance

def __int__(self):
    return int(self._distance)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we know we can cast a <code>Distance</code> object into a float value, we can tackle the problem of arithmetic expressions.
To avoid too much lengthy code right here, I will just demonstrate this for the addition. Python allows us to implement
arithmetic operations in way that allow even mixing <code>Distance</code> objects with other numeric objects (i. e. integers or
floating point numbers) or any other object as long as it can be cast into a floating point number:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">def __add__(self, other):
    return Distance(self._dist + float(other))

def __radd__(self, other):
    return Distance(self._dist + float(other))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Implementing both methods,
<a href="https://docs.python.org/3/reference/datamodel.html#object.__add__"><code>__add__</code></a> and
<a href="https://docs.python.org/3/reference/datamodel.html#object.__radd__"><code>__radd__</code></a> is necessary to ensure
addition works also with non-<code>Distance</code> operands being put in the first place. This
<a href="https://stackoverflow.com/questions/24431288/understanding-arithmetic-operators-in-python#24431474">post on
StackOverflow</a> by <a href="https://stackoverflow.com/users/100297/martijn-pieters">Martijn Pieters</a> offers a good explanation of
the How and Why.</p>
</div>
<div class="paragraph">
<p>Implementing rich comparison operators (&lt;, &gt;, ==, &lt;=, &gt;=, !=) works along the same lines, just that there are no explicit
reflected implementations (instead, the opposite operator is used as reflected implementation, e. g. &lt; is the reflected
operator to &gt;=, and == pairs with !=). I will not waste time and space here to replicate what&#8217;s already written in the
<a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__">Python documentation</a> on that subject.</p>
</div>
<div class="paragraph">
<p>Wait, so far we managed to produce a class that more or less does the same as any trivial float? Indeed, you&#8217;re right
about that, but there was a requirement about converting distances into different units, wasn&#8217;t it? That would really
set our class apart from what a standard float value could do.</p>
</div>
<div class="paragraph">
<p>Now, the first thing any programmer would consider is adding properties to the class, managing the conversion of units.
Example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">@property
def in_yards(self):
    return self._distance / 0.9144

@in_yards.setter
def in_yards(self, value):
    self._distance = float(value) * 0.9144</code></pre>
</div>
</div>
<div class="paragraph">
<p>This way, <code>in_yards</code> becomes a writeable property that automatically converts back and forth, so the internal
representation remains in metres. Pretty cool, eh? But to my reckoning, this is ugly to maintain:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You need a getter and setter method for each conversion you want to offer, which bloats your code</p>
</li>
<li>
<p>Having numeric constants scattered all across the code is a no-no as well</p>
</li>
<li>
<p>This approach hurts the DRY paradigm ("don&#8217;t repeat yourself")</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>From a code maintenance and transparency point of view, it would be much better to centrally maintain a list of
units and their conversion rules, and have our <code>Distance</code> class learn them dynamically. Fostering a modular design,
we keep the list of units and the conversion itself well out of our <code>Distance</code> class (so you could use them in
any other class as well).</p>
</div>
<div class="paragraph">
<p><strong>The following code goes <em>outside</em> of the <code>Distance</code> class definition!</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">import math

factors = {
    'mm': 0.001,
    'cm': 0.01,
    'in': 0.0254,
    'dm': 0.1,
    'ft': 0.3048,
    'yd': 0.9144,
    'm':  1.0,
    'km': 1000.0,
    'mi': 1609.344,
    'nm': 1852.0,
    'gm': 1855.3248,
    'ls': 299792458.0,
    'au': 149597870700.0,
    'ly': 9460730472580800.0,
    'pc': (648000.0 / math.pi) * 149597870700.0,
}

available = set(factors.keys())

def convert(value, from_unit, to_unit):
    assert {from_unit, to_unit} &lt;= available
    return value * factors[from_unit] / factors[to_unit]</code></pre>
</div>
</div>
<div class="paragraph">
<p>Yes, that&#8217;s the way the <a href="https://en.wikipedia.org/wiki/International_Astronomical_Union">IAU</a> defines one
<a href="https://en.wikipedia.org/wiki/Parsec">parsec</a>&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>I put all that in a separate module, hence I set the <code>available</code> reference for convenience when using the module
from outside. I consciously chose a set over tuple or list, as it permits checking for subsets (i. e. it is possible
to test multiple units in one statement, as demonstrated in the <code>convert</code> implementation).</p>
</div>
<div class="paragraph">
<p>Now coming back to the <code>Distance</code> class. As already shown before, properties would make a nice way to have conversion
implemented. This would allow to get and set the distance value in any unit, probably looking like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">&gt;&gt;&gt; d = Distance(100)
&gt;&gt;&gt; d.in_ft
328.0839895013123
&gt;&gt;&gt; d.in_yd = 200
&gt;&gt;&gt; d
182.88</code></pre>
</div>
</div>
<div class="paragraph">
<p>To spare us the pain of maintaining a gazillion property getter and setter methods for this purpose, we can abuse the
fact that in Python it&#8217;s quite easy to hack around the implementation of new-style classes. Thus, we just have to
implement a custom method adding properties to the class at runtime:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">def __set(self, value, unit):
    self._distance = convert(value, unit, 'm')

def __add_property(self, name, value, doc=None):
    setattr(
        self.__class__, 'in_' + name, property(
            fget=lambda self: convert(self._distance, 'm', name),
            fset=lambda self, value: self.__set(value, name),
            doc=doc
        )
    )</code></pre>
</div>
</div>
<div class="paragraph">
<p>Since assignments are not allowed in <code>lambda</code> statements, I use an auxiliary <code>__set()</code> method which does the
conversion and assigns the result to the internal instance variable representing the distance value.</p>
</div>
<div class="paragraph">
<p>Finally, <code>__init__</code> needs to actually create all the properties. This can be done in a simple loop:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">_distance = 0.0

def __init__(self, value=0.0, unit='m'):
    self.__set(value, unit)
    for i in available:
        self.__add_property(i, convert(value, unit, i))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Since <code>__init__</code> does no longer explicitly define <code>_distance</code>, it&#8217;s good style to set <code>_distance</code> as
instance variable already at class level. Otherwise you will get warnings from different lint tools.</p>
</div>
<div class="paragraph">
<p>That&#8217;s it already&#8201;&#8212;&#8201;with those elements, a <code>Distance</code> class fulfils all our requirements set at the beginning:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>its instances behave (almost) like regular numeric data types (float, int)</p>
</li>
<li>
<p>an instance&#8217;s value can be easily retrieved in any unit conversion</p>
</li>
<li>
<p>conversions are easy to maintain (Python dictionary)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The full implementation with all the bells and whistles is available as
<a href="https://gist.github.com/daemotron/aa100f65c6db0ed5c7064a6954ceaa28">GitHub Gist</a> (note how most of the code is actually
dedicated to giving the class a predictable "numeric" behaviour).</p>
</div>]]></description><link>https://daemotron.github.io/2017/05/28/Pythonic-Distance-Conversion.html</link><guid isPermaLink="true">https://daemotron.github.io/2017/05/28/Pythonic-Distance-Conversion.html</guid><category><![CDATA[Development]]></category><category><![CDATA[Python]]></category><dc:creator><![CDATA[Jesco Freund]]></dc:creator><pubDate>Sun, 28 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[GitFlow Groundhog Day]]></title><description><![CDATA[<div class="paragraph">
<p>Yes, this is all over again the old discussion about what&#8217;s the best branching
model for projects using <a href="https://git-scm.com/">Git</a> as their version control
system. I know, there are countless blog posts
(e. g. <a href="http://nvie.com/posts/a-successful-git-branching-model/">1</a>,
<a href="https://guides.github.com/introduction/flow/">2</a>, or
<a href="https://barro.github.io/2016/02/a-succesful-git-branching-model-considered-harmful/">3</a>)
about that topic out there&#8230;&#8203; yet, I feel most of the discussion is focused on
projects with continuous deployment (i. e. mostly web applications), whereas
classical desktop software with classical release cycles are rather
underrepresented.</p>
</div>
<div class="paragraph">
<p>First, some thoughts on what I actually need, before creating any new ideas
others put already in the bin due to being unfit&#8230;&#8203; When hacking on a desktop
software or an operating system (i. e. something that will be deployed on
many systems, by many people, without me as developer being aware), it all
comes down to releases. People are used to releases, updates etc. being clearly
labelled with a <a href="http://semver.org/">semantic version</a> designator. This is no
different from what you should do for SAAS web applications&#8201;&#8212;&#8201;what&#8217;s really
different here is that for desktop applications, several supported versions
can exist in parallel. So for me, a good branching model should</p>
</div>
<div class="ulist">
<ul>
<li>
<p>limit to one eternal branch (have most recent <strong>working</strong> code in <code>master</code>)</p>
</li>
<li>
<p>use feature branches to change the code in <code>master</code></p>
</li>
<li>
<p>support maintenance of several active releases in parallel</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>So, why not have a look at what are other open source developers doing? Well,
that proved to be easier said than done. I&#8217;m quite familiar with
<a href="https://www.freebsd.org/doc/en/books/dev-model/release-branches.html">FreeBSD&#8217;s branching model</a>,
but it is rather old-school, was ported from CVS to Subversion and seems to have
<a href="https://wiki.freebsd.org/GitDrawbacks">some misfits with Git</a> (of course the
linked article blames Git, but that means vice versa if Git is otherwise
considered good or is mandatory to be used, the FreeBSD branching model doesn&#8217;t
fit well with Git).</p>
</div>
<div class="paragraph">
<p>But what about more recent projects, that were not ported from older version
control systems? Well, there are some, like <a href="https://atom.io/">Atom</a> and
<a href="https://electron.atom.io/">Electron</a>. Both would be perfect samples, as they
use semantic versions, have no continuous deployment and are managed by
GitHub&#8201;&#8212;&#8201;they could be great role models about how Git in general and GitHub
in particular are meant to be used for this type of project. I wrote "would" and
"could" since both projects didn&#8217;t document their branching model anywhere. Of
course that didn&#8217;t prevent me from reviewing both projects' repository structure
in order to explore what branches I would find there. For Electron, I couldn&#8217;t
really figure a structure, but for Atom, there seems to be one:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://daemotron.github.io/images/2017/05/02/atom-git-branches.png" alt="Atom Git Branches">
</div>
</div>
<div class="paragraph">
<p>Seemingly, Atom uses dedicated branches for releases, and tags on these branches
to mark published releases. This would be quite in line with what
<a href="http://www.bitsnbites.eu/author/m/">Marcus Geelnard</a> proposes in his
<a href="http://www.bitsnbites.eu/a-stable-mainline-branching-model-for-git/">stable mainline branching model for Git</a>.
At a first glance, this seems to be the only acceptable model also satisfying
my third requirement, i. e. the maintenance of several active releases in
parallel, that are not nice sequences. This feels quite close from what I know
from FreeBSD&#8201;&#8212;&#8201;<code>master</code> corresponds to <code>head</code>, and the release branches
correspond to FreeBSD&#8217;s <code>releng</code> branches.</p>
</div>
<div class="paragraph">
<p>However, there&#8217;s another branching model that looks quite appealing to me:
<a href="http://endoflineblog.com/about">Adam Ruka</a>'s
<a href="http://endoflineblog.com/oneflow-a-git-branching-model-and-workflow">OneFlow</a>
model (the post is quite recent, but the idea of that model already dates back
to his first article on the subject,
<a href="http://endoflineblog.com/gitflow-considered-harmful">GitFlow considered harmful</a>).
True, in the preamble it already says:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>The main condition that needs to be satisfied in order to use OneFlow for a
project is that every new production release is based on the previous release</p>
</div>
<div class="paragraph">
<p>[...]</p>
</div>
<div class="paragraph">
<p>If your project needs to maintain multiple simultaneous yet incompatible release
versions that way, then OneFlow won&#8217;t work for you out of the box.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>But is that really true for my projects? For FreeBSD and Python it certainly
is&#8201;&#8212;&#8201;both projects work with two major releases, from which they continue to
derive also new minor releases. For my projects however, old versions would
still be supported with patch releases (e. g. in case of a security issue
detected), but new versions would only be derived from the current development
stage, i. e. from what can be found in <code>master</code>. So would the OneFlow model
work for me?</p>
</div>
<div class="paragraph">
<p>Honestly speaking, I can&#8217;t tell right now. There is one aspect about OneFlow
that intrigues me and at the same raises some questions: It&#8217;s about merging
back from release and hotfix branches. While I can mostly understand the idea
of merging hotfix stuff back into <code>master</code> (you probably want to fix the same
issue also on <code>master</code> that you just fixed on a release), I don&#8217;t understand the
concept of release branches, if they should be merged back. Let&#8217;s look at
several scenarios:</p>
</div>
<div class="paragraph">
<p>The trivial one: in preparation for a release, you need to bump the version
number of your project. Fine, but what does in this trivial scenario distinguish
a release branch from a mere feature branch? What is the value added for doing
it that way? I can only imagine it&#8217;s more convenient for projects with a bad
version information maintainability (e. g. maintaining version information for
several submodules like Electron has to do, or maintaining version information
in several files scattered across the project&#8217;s source tree). It also would mean
you have to stick to a certain sequence:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>create the release branch</p>
</li>
<li>
<p>do your stuff on the release branch (bump version &amp; tag release)</p>
</li>
<li>
<p>you can create new feature branches off <code>master</code> in the meantime</p>
</li>
<li>
<p>merge the release branch back into <code>master</code> before any new feature branch
is allowed to be merged (i. e. apply a code freeze rule for <code>master</code>)</p>
</li>
<li>
<p>bump the version on <code>master</code> to the next RELENG working release</p>
</li>
<li>
<p>rebase all feature branches to the bumped <code>master</code></p>
</li>
<li>
<p>start merging back feature branches</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For me it would feel more natural to have a sequence like this one:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>create a release branch</p>
</li>
<li>
<p>bump version on <code>master</code> to the next development release</p>
</li>
<li>
<p>rebase any feature branch to the bumped <code>master</code></p>
</li>
<li>
<p>do whatever has to be done on the release branch (version bump, release
candidates, &#8230;&#8203;)</p>
</li>
<li>
<p>tag the final version on the release branch</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The ugly aspect of this
<a href="https://barro.github.io/2016/02/a-succesful-git-branching-model-considered-harmful/">cactus model</a>
(that&#8217;s what <a href="https://barro.github.io/author/">Jussi Judin</a> calls it) is the
merging effort between the different branches. It allows the <code>master</code> branch
to strongly evolve while the release is being finished, which makes it hard to
keep fixes in sync between potentially several release branches, <code>master</code> and
feature branches. OneFlow solves this problem, but at the price of a necessary
code freeze in <code>master</code> during the release preparation period.</p>
</div>
<div class="paragraph">
<p>So it all comes down to one question: What happens in my repositories in
preparation for a release, and how strong can the <code>master</code> branch evolve during
that time? To be honest, when preparing a release, applying a code freeze on
<code>master</code> wouldn&#8217;t be that terrible a price to pay. Contrariwise, this could
help keeping the discipline to finalize a release before turning attention
towards other ventures, or consequently abandon a release attempt if too much
has to be fixed upfront. So indeed, OneFlow could generally fit my needs.</p>
</div>
<div class="paragraph">
<p>There&#8217;s just one point I would handle differently, and that is patch level
releases. For sure, a hotfix or patch release has to be based on the latest
previous release, but that could as well be a hotfix release itself (e. g.
2.3.2 would be based on 2.3.1). OneFlow is not really taking this into
consideration, so for me, I&#8217;m more or less back on
<a href="http://www.bitsnbites.eu/author/m/">Marcus Geelnard</a>'s
<a href="http://www.bitsnbites.eu/a-stable-mainline-branching-model-for-git/">stable mainline branching model for Git</a>,
but with one amendment taken from OneFlow:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://daemotron.github.io/images/2017/05/02/advanced-git-branching-model.png" alt="My Git Branching Model">
</div>
</div>
<div class="paragraph">
<p>So my personal branching model is a mix of the OneFlow and Cactus models:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>New features are developed in feature branches, leaving <code>master</code> as single
eternal branch (in accordance with OneFlow).</p>
</li>
<li>
<p><code>master</code> is a protected branch, so features have to be merged by pull requests
with all applicable code checks (CI, quality reviews) to be passed prior
merge (my own rule enhancement).</p>
</li>
<li>
<p>Alpha and beta pre-releases are managed via tags in <code>master</code>. Version bumps
and tags can be applied either as an override to the protected branch rule by
a repository administrator, or by using quick &amp; dirty pull requests (idea
shamelessly stolen from FreeBSD).</p>
</li>
<li>
<p>Release branches are branched off <code>master</code> after the beta phase has been
completed (this helps avoiding too many merges and rebasing between the
different branches).</p>
</li>
<li>
<p>Release candidates and the final release are managed as tags in the respective
release branch.</p>
</li>
<li>
<p>While a release branch is going through the pre-release phase, <code>master</code> is
under code freeze (i. e. no pull requests from feature branches shall be
merged during that time&#8201;&#8212;&#8201;that&#8217;s again my own conclusion).</p>
</li>
<li>
<p>After tagging a release branch as final (zero patch release), the release
branch shall merge back into <code>master</code> (introducing fixes made during the
release candidate phase&#8201;&#8212;&#8201;in line with OneFlow).</p>
</li>
<li>
<p>Once this merge has happened, the version in <code>master</code> shall be bumped to the
next upcoming release (suffixed with <code>-pre</code> or <code>-dev</code>&#8201;&#8212;&#8201;again shamelessly
copied from FreeBSD).</p>
</li>
<li>
<p>Once this has happened, all active feature branches need to be rebased onto
the most recent version of <code>master</code>. This implicitly also lifts the code
freeze previously imposed on <code>master</code> (again in line with OneFlow).</p>
</li>
<li>
<p>From the moment of the final release on, the release branch becomes a residual
maintenance branch, managed as protected branch (to avoid incidental
development in the wrong place&#8201;&#8212;&#8201;this is my own enhancement to OneFlow).</p>
</li>
<li>
<p>Post release patches (i. e. hot fixes) are managed within the residual release
branch (which becomes a maintenance branch after the final release).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>With this set of rules, it should be fairly straight forward to manage projects
with sequential releases, but a need for hotfix releases also for older releases
otherwise not being developed any further.</p>
</div>]]></description><link>https://daemotron.github.io/2017/05/02/Git-Flow-Groundhog-Day.html</link><guid isPermaLink="true">https://daemotron.github.io/2017/05/02/Git-Flow-Groundhog-Day.html</guid><category><![CDATA[Development]]></category><category><![CDATA[Git]]></category><category><![CDATA[GitHub]]></category><dc:creator><![CDATA[Jesco Freund]]></dc:creator><pubDate>Tue, 02 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Reboot]]></title><description><![CDATA[<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>I amar prestar aen,<br>
Han mathon ne nen,<br>
Han mathon ne chae<br>
A han noston ned 'wilith</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>And again, my world is changing. A bit more than one year ago, I moved from a self-hosted blog built with <a href="https://ghost.org/">Ghost</a> to a fully managed website using Jimdo&#8217;s website construction kit. Sure, the effort for maintaining the full stack (server, os, database, web server software, etc.) has gone, and I certainly don&#8217;t want it back.</p>
</div>
<div class="paragraph">
<p>But maintaining the website itself has proven to be a bit of a hassle with Jimdo&#8201;&#8212;&#8201;each page, even each blog post, has to be bricolaged together with predefined content elements. So a lot of my time spent on the website went into layouting articles, instead of writing content. Other than with Ghost, you couldn&#8217;t just log in and write away in simple plain text (<a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>, to be precise).</p>
</div>
<div class="paragraph">
<p>This really had an impact on my posting frequency&#8201;&#8212;&#8201;at some time, it was as low as just once every couple of months (my personal "best" was a full 5 months of silence). Not being happy with Jimdo (mostly due to that), I constantly kept looking for alternate solutions, that would give me back an easier content creation, but not at the cost of making me spend hours on administrating servers and applications again.</p>
</div>
<div class="paragraph">
<p>I tried some big CMS stuff (like <a href="https://plone.org/">Plone 5</a>, <a href="https://www.django-cms.org/">django CMS</a>, <a href="http://www.opencms.org/">OpenCms</a> and <a href="http://www.ametys.org/">Ametys</a>) hosted on managed cloud services, but again I didn&#8217;t find the simplicity I was hoping for. Either it was very complex to set up the site itself, or blogging in general was not well supported. Or media management proved to be complex, or inserting syntax-highlighted code snippets into articles was impossible without bigger hacks&#8230;&#8203; just chose, none of them had real simplicity and elegance in store.</p>
</div>
<div class="paragraph">
<p>Over time, again and again I was drawn to static site generators. For some time, my blog was running on <a href="https://getnikola.com/">Nikola</a>, and back then I had good reasons to stop using it&#8201;&#8212;&#8201;mostly the long run time to get my site updated after having changed something small as a typo fix in an article, but also the fact I had to have access to a computer with the repo cloned locally and all the software dependencies installed.</p>
</div>
<div class="paragraph">
<p>Yet the simplicity of hosting a static site is still very attractive, so how on earth could I get a static blog without need for local software and build tools, and with the ability to generate content from any computer? I knew about <a href="https://pages.github.com/">GitHub Pages</a> and <a href="https://jekyllrb.com/">Jekyll</a>, but I could never warm to  Jekyll or derivated static site generators (I&#8217;m simply not a ruby guy&#8230;&#8203;). I also experimented with <a href="http://www.sphinx-doc.org/">Sphinx</a> and <a href="https://github.com/syntaf/travis-sphinx">travis-sphinx</a>, but Sphinx is not really made for websites and blogging.</p>
</div>
<div class="paragraph">
<p>When I recently stumbled accross <a href="http://hubpress.io/">HubPress</a>, I knew I had found what I was looking for. This blogging solution is built around GitHub pages, works fine even without ever loading something to the local computer, and offers a Ghost-like browser-based post editor (using <a href="http://asciidoctor.org/">AsciiDoc</a> instead of Markdown). On top, posts can be written via GitHub&#8217;s built-in editor, or offline with any text editor&#8201;&#8212;&#8201;they&#8217;re just <code>.adoc</code> files in a GitHub pages repository or branch.</p>
</div>
<div class="paragraph">
<p>After more than 15 years of running a personal website, I&#8217;m certainly not naive when it comes to site generators and blogging solutions. I&#8217;m not sure HubPress will become a sustainable solution, driving my site for a longer period. However, it certainly has the potential to do so, as it brings along all the ingredients I was long looking for&#8201;&#8212;&#8201;I will certainly give it the chance to prove it can do this for me, and hopefully also increase my posting frequency.</p>
</div>]]></description><link>https://daemotron.github.io/2017/04/30/Reboot.html</link><guid isPermaLink="true">https://daemotron.github.io/2017/04/30/Reboot.html</guid><category><![CDATA[Blog]]></category><category><![CDATA[HubPress]]></category><dc:creator><![CDATA[Jesco Freund]]></dc:creator><pubDate>Sun, 30 Apr 2017 00:00:00 GMT</pubDate></item></channel></rss>