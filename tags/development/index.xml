<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on My Universe</title><link>https://daemotron.github.io/tags/development/</link><description>Recent content in development on My Universe</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 08 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://daemotron.github.io/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Colours in Django Models</title><link>https://daemotron.github.io/posts/colours-in-django-models/</link><pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate><guid>https://daemotron.github.io/posts/colours-in-django-models/</guid><description>Colours are quite a common property to real world objects. So naturally when building web applications, sooner or later one encounters the need to assign a colour attribute to an object. For Django developers, this usually means adding a models.CharField to their model, ready to capture the colour&amp;rsquo;s hex code.
Technically this works pretty well, as those hex codes can directly be used in HTML style attributes, embedded SVG drawings, etc.</description></item><item><title>Pythonic Distance Conversion</title><link>https://daemotron.github.io/posts/pythonic-distance-conversion/</link><pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate><guid>https://daemotron.github.io/posts/pythonic-distance-conversion/</guid><description>When dealing with distances or lengths, it&amp;rsquo;s a common problem to convert values between all the different units available out there. Of course, converting itself is a less than complicated simple floating point division or multiplication, depending on how values and conversion factors are stored internally. However, maintaining conversion factors all across a project is a tedious task, and Python has some good means at hand to simplify our life.</description></item><item><title>GitFlow Groundhog Day</title><link>https://daemotron.github.io/posts/git-flow-groundhog-day/</link><pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate><guid>https://daemotron.github.io/posts/git-flow-groundhog-day/</guid><description>Yes, this is all over again the old discussion about what&amp;rsquo;s the best branching model for projects using Git as their version control system. I know, there are countless blog posts (e. g. 1, 2, or 3) about that topic out there&amp;hellip; yet, I feel most of the discussion is focused on projects with continuous deployment (i. e. mostly web applications), whereas classical desktop software with classical release cycles are rather underrepresented.</description></item></channel></rss>