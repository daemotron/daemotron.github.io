<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>x-plane on My Universe</title><link>https://daemotron.github.io/tags/x-plane/</link><description>Recent content in x-plane on My Universe</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 20 Apr 2023 22:20:48 +0200</lastBuildDate><atom:link href="https://daemotron.github.io/tags/x-plane/index.xml" rel="self" type="application/rss+xml"/><item><title>Cache Your Datarefs</title><link>https://daemotron.github.io/2023/04/20/cache-your-datarefs/</link><pubDate>Thu, 20 Apr 2023 22:20:48 +0200</pubDate><guid>https://daemotron.github.io/2023/04/20/cache-your-datarefs/</guid><description>Nearly every X-Plane plugin accesses one or several of X-Plane&amp;rsquo;s datarefs at runtime. It&amp;rsquo;s not uncommon to find code like this:
1void set_data(float value) 2{ 3 XPLMDataRef dref = XPLMFindDataRef(&amp;#34;what/ever/data/ref/we/need&amp;#34;); 4 XPLMSetDataf(dref, value); 5} Admittedly this works. However, there are a couple of reasons why the code above is not the best idea, if you&amp;rsquo;re seeking to write a solid and well-performing plugin:
The code doesn&amp;rsquo;t check if dref actually points to a dataref before attempting to write to it The caller doesn&amp;rsquo;t get notified about success or failure of the operation XPLMFindDataRef is expensive, and should be used only during plugin initialisation In fact, also X-Plane&amp;rsquo;s SDK documentation emphasizes the third point:</description></item><item><title>Talk to the Log</title><link>https://daemotron.github.io/2023/01/14/talk-to-the-log/</link><pubDate>Sat, 14 Jan 2023 19:51:48 +0100</pubDate><guid>https://daemotron.github.io/2023/01/14/talk-to-the-log/</guid><description>Making an X-Plane plugin &amp;ldquo;talk&amp;rdquo; to us is one of the boilerplate tasks when setting up a new plugin project. X-Plane has its own log file, log.txt, which is found in X-Plane&amp;rsquo;s root folder. The file gets reset every time X-Plane starts, so there&amp;rsquo;s no need to rotate or trim it from time to time. As a plugin author, we have the choice to either write our own log file, or to jump on X-Plane&amp;rsquo;s bandwagon and use its logging system for our purposes.</description></item><item><title>X-Plane Plugin Boilerplate</title><link>https://daemotron.github.io/2023/01/04/x-plane-plugin-boilerplate/</link><pubDate>Wed, 04 Jan 2023 15:28:28 +0100</pubDate><guid>https://daemotron.github.io/2023/01/04/x-plane-plugin-boilerplate/</guid><description>X-Plane has a well-documented, accessible API, making it relatively easy to write plugins for the simulator. In this post I&amp;rsquo;m going to demonstrate how a basic plugin boilerplate can look like, and how to build it on different platforms.
Let&amp;rsquo;s get started with some basics: X-Plane plugins are dynamically linked libraries, which are loaded by X-Plane at runtime. They have to provide an API as defined by the X-Plane SDK, so X-Plane can access the plugin via defined entry points.</description></item></channel></rss>